<?php

namespace proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class events extends \App\Entity\events implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\events' . "\0" . 'id', '' . "\0" . 'App\\Entity\\events' . "\0" . 'address', '' . "\0" . 'App\\Entity\\events' . "\0" . 'name', '' . "\0" . 'App\\Entity\\events' . "\0" . 'description', '' . "\0" . 'App\\Entity\\events' . "\0" . 'event_image', '' . "\0" . 'App\\Entity\\events' . "\0" . 'from_date', '' . "\0" . 'App\\Entity\\events' . "\0" . 'to_date', '' . "\0" . 'App\\Entity\\events' . "\0" . 'from_time', '' . "\0" . 'App\\Entity\\events' . "\0" . 'to_time', '' . "\0" . 'App\\Entity\\events' . "\0" . 'event_link', '' . "\0" . 'App\\Entity\\events' . "\0" . 'is_published', '' . "\0" . 'App\\Entity\\events' . "\0" . 'status', '' . "\0" . 'App\\Entity\\events' . "\0" . 'created_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'updated_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'deleted_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'eventRegion', '' . "\0" . 'App\\Entity\\events' . "\0" . 'eventUsers'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\events' . "\0" . 'id', '' . "\0" . 'App\\Entity\\events' . "\0" . 'address', '' . "\0" . 'App\\Entity\\events' . "\0" . 'name', '' . "\0" . 'App\\Entity\\events' . "\0" . 'description', '' . "\0" . 'App\\Entity\\events' . "\0" . 'event_image', '' . "\0" . 'App\\Entity\\events' . "\0" . 'from_date', '' . "\0" . 'App\\Entity\\events' . "\0" . 'to_date', '' . "\0" . 'App\\Entity\\events' . "\0" . 'from_time', '' . "\0" . 'App\\Entity\\events' . "\0" . 'to_time', '' . "\0" . 'App\\Entity\\events' . "\0" . 'event_link', '' . "\0" . 'App\\Entity\\events' . "\0" . 'is_published', '' . "\0" . 'App\\Entity\\events' . "\0" . 'status', '' . "\0" . 'App\\Entity\\events' . "\0" . 'created_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'updated_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'deleted_at', '' . "\0" . 'App\\Entity\\events' . "\0" . 'eventRegion', '' . "\0" . 'App\\Entity\\events' . "\0" . 'eventUsers'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (events $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', []);

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', [$address]);

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventImage', []);

        return parent::getEventImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventImage($event_image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventImage', [$event_image]);

        return parent::setEventImage($event_image);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromDate', []);

        return parent::getFromDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromDate($from_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromDate', [$from_date]);

        return parent::setFromDate($from_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getToDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToDate', []);

        return parent::getToDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setToDate($to_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToDate', [$to_date]);

        return parent::setToDate($to_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromTime', []);

        return parent::getFromTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromTime($from_time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromTime', [$from_time]);

        return parent::setFromTime($from_time);
    }

    /**
     * {@inheritDoc}
     */
    public function getToTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToTime', []);

        return parent::getToTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setToTime($to_time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToTime', [$to_time]);

        return parent::setToTime($to_time);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventLink()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventLink', []);

        return parent::getEventLink();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventLink($event_link)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventLink', [$event_link]);

        return parent::setEventLink($event_link);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPublished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPublished', []);

        return parent::getIsPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPublished($is_published)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPublished', [$is_published]);

        return parent::setIsPublished($is_published);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($created_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$created_at]);

        return parent::setCreatedAt($created_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updated_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updated_at]);

        return parent::setUpdatedAt($updated_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt($deleted_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deleted_at]);

        return parent::setDeletedAt($deleted_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventRegion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventRegion', []);

        return parent::getEventRegion();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventRegion($eventRegion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventRegion', [$eventRegion]);

        return parent::setEventRegion($eventRegion);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventUsers', []);

        return parent::getEventUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventUsers($eventUsers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventUsers', [$eventUsers]);

        return parent::setEventUsers($eventUsers);
    }

}
